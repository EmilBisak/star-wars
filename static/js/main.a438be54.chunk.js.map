{"version":3,"sources":["component/Header.js","component/Main.js","component/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","people","counter","nextProps","console","log","length","setState","peopleJSX","map","el","i","key","name","eye_color","height","hair_color","mass","type","placeholder","style","width","margin","display","Component","Footer","axios","require","App","_this2","get","then","response","json","data","results","catch","error","component_Header","component_Main","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSASeA,eANA,kBACXC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,8BCsDOC,cAtDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAQ,GACRC,QAAU,GAJCT,yFAQOU,GAKtB,GAJAC,QAAQC,IAAI,YAAYF,EAAUF,OAAOK,QACzCF,QAAQC,IAAI,QAAQT,KAAKJ,MAAMS,OAAOK,QAGlCH,EAAUF,OAAOK,SAAWV,KAAKJ,MAAMS,OAAOK,OAAQ,KAC9CL,EAAWE,EAAXF,OACRL,KAAKW,SAAS,CAAEN,WAEhBG,QAAQC,IAAIJ,qCAUX,IACGA,EAAWL,KAAKI,MAAhBC,OAERG,QAAQC,IAAI,aAAcT,KAAKI,OAE/B,IAAIQ,EAAYP,EAAOQ,IAAI,SAACC,EAAIC,GAC5B,OACIvB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKD,GACLvB,EAAAC,EAAAC,cAAA,mBAAWoB,EAAGG,KAAd,KACAzB,EAAAC,EAAAC,cAAA,uBAAeoB,EAAGI,UAAlB,KACA1B,EAAAC,EAAAC,cAAA,oBAAYoB,EAAGK,OAAf,KACA3B,EAAAC,EAAAC,cAAA,wBAAgBoB,EAAGM,WAAnB,KACA5B,EAAAC,EAAAC,cAAA,kBAAUoB,EAAGO,KAAb,QAIZ,OACI7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO4B,KAAK,OAAOC,YAAY,SAASC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAAUC,QAAS,WAC1FnC,EAAAC,EAAAC,cAAA,UACKkB,WAjDFgB,aCAEC,0LAEP,IAEFjB,EADaZ,KAAKJ,MAAfS,OACgBQ,IAAI,SAACC,EAAIC,GAC5B,OACIvB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKD,GACLvB,EAAAC,EAAAC,cAAA,wBAAgBoB,EAAGI,UAAnB,QAIZ,OACI1B,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,UAAKkB,WAdegB,cCE9BE,EAAQC,EAAQ,IAgCPC,6MA5Bb5B,MAAQ,CACNC,OAAQ,uFAGU,IAAA4B,EAAAjC,KAClB8B,EAAMI,IAAI,gCACLC,KAAK,SAAAC,GAAQ,OAAIA,IACjBD,KAAK,SAAAE,GACFJ,EAAKtB,SAAS,CACVN,OAAQgC,EAAKC,KAAKC,YAGzBC,MAAM,SAAUC,GACbjC,QAAQC,IAAIgC,sCAKpB,OACEjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,CAAMtC,OAAQL,KAAKI,MAAMC,SACzBb,EAAAC,EAAAC,cAACkD,EAAD,CAAQvC,OAAQL,KAAKI,MAAMC,iBAxBjBuB,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.a438be54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <h1>Star Wars App</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            people: [],\r\n            counter : 0\r\n        }\r\n      }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"NextProps\",nextProps.people.length);\r\n        console.log(\"Props\",this.props.people.length);\r\n        \r\n        \r\n        if (nextProps.people.length !== this.props.people.length) {\r\n            const { people } = nextProps;\r\n            this.setState({ people });\r\n            // this.setState({counter: 1})\r\n            console.log(people);\r\n            \r\n            \r\n        }\r\n\r\n        // console.log(\"State MAIN\", this.state);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const { people } = this.state;\r\n        // console.log(\"PROPS MAIN\", this.props);\r\n        console.log(\"State MAIN\", this.state);\r\n\r\n        let peopleJSX = people.map((el, i) => {\r\n            return (\r\n                <li key={i}>\r\n                    <h2>name: {el.name} </h2>\r\n                    <p>eye color: {el.eye_color} </p>\r\n                    <p>height: {el.height} </p>\r\n                    <p>hair color: {el.hair_color} </p>\r\n                    <p>mass: {el.mass} </p>\r\n                </li>)\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <input type=\"text\" placeholder=\"Search\" style={{ width: \"50%\", margin: \"0 auto\", display: \"table\" }} />\r\n                <ul>\r\n                    {peopleJSX}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Main","import React, {Component} from 'react';\r\nimport './footer.css';\r\n\r\nexport default class Footer extends Component {\r\n\r\n    render () {\r\n        const {people} = this.props;\r\n        let peopleJSX = people.map((el, i) => {\r\n            return (\r\n                <li key={i}>\r\n                    <h2>eye color: {el.eye_color} </h2>\r\n                </li>)\r\n        })\r\n\r\n        return (\r\n            <footer>\r\n                <small>copyright &copy; Emil 2018</small>\r\n                <ul>{peopleJSX}</ul>\r\n            </footer>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './component/Header';\nimport Main from './component/Main';\nimport Footer from './component/Footer';\nconst axios = require('axios');\n\nclass App extends Component {\n\n  state = {\n    people: []\n}\n\n  componentDidMount() {\n    axios.get('https://swapi.co/api/people/')\n        .then(response => response)\n        .then(json => {\n            this.setState({\n                people: json.data.results\n            })\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n}\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main people={this.state.people}/>\n        <Footer people={this.state.people}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}